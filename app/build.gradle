/*

If you check out the source for this project, you'll notice something a little
silly. We've got a hundred classes each with 700 methods. While this is
clearly a contrived example, there's nothing stopping a large project from
getting this big, especially if you've got a lot of big dependencies. Let's
try compiling.

We get the following error:

    trouble writing output: Too many method references: 70936; max is 65536.

Let's unpack what's going on here. The Android virtual machine doesn't
actually run Java byte code, it runs Dalvik byte code, and there's a build
step after Java compilation where the Java byte code is turned into Dalvik
byte code. This step is called Dexing. Part of this process is compiling a
table of every method in the application, which is indexed with two bytes.
That means we're limited to 65k methods.

Fortunately, we can ask Gradle to simply break up this table into multiple
tables simply by setting multiDexEnabled true. That's all there is to it. If
we add that line to defaultConfig and compile again, we're golden.

Just something to be aware of, so you don't get bit in the future.

*/

apply plugin: 'com.android.application'

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    defaultConfig {
        applicationId "com.udacity.gradle.multidex"
        minSdkVersion 10
        targetSdkVersion 22
        versionCode 1
        versionName "1.0"
        // Remove this comment to fix 65k method limit error
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:22.1.1'
    compile 'com.google.dagger:dagger:2.0'
}

afterEvaluate {
    tasks.matching {
        it.name.startsWith('dex')
    }.each { dx ->
        if (dx.additionalParameters == null) {
            dx.additionalParameters = []
        }
        // optional
        dx.additionalParameters += '--multi-dex'
        dx.additionalParameters += "--main-dex-list=$projectDir/maindex.keep".toString() // enable the main-dex-list
        dx.additionalParameters += "--minimal-main-dex".toString() // enable the main-dex-list
    }
    // «∞÷√»ŒŒÒ
    dexDebug.dependsOn generateMainDexList
    dexRelease.dependsOn generateMainDexList
    shrinkReleaseMultiDexComponents.onlyIf { false }
}

task generateMainDexList(type: Exec) {
    workingDir '.'

    //on windows:
    commandLine 'cmd', '/c', 'gen-main-dex.bat'

    //on linux
//    commandLine './stop.sh'

    //store the output instead of printing to the console:
    standardOutput = new ByteArrayOutputStream()

    //extension method stopTomcat.output() can be used to obtain the output:
    ext.output = {
        return standardOutput.toString()
    }
}