apply plugin: 'com.android.application'

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    defaultConfig {
        applicationId "com.young.multidex.custom"
        minSdkVersion 10
        targetSdkVersion 22
        versionCode 1
        versionName "1.0"
        // Remove this comment to fix 65k method limit error
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:22.1.1'
    compile 'com.google.dagger:dagger:2.0'
}

afterEvaluate {
    tasks.matching {
        it.name.startsWith('dex')
    }.each { dx ->
        if (dx.additionalParameters == null) {
            dx.additionalParameters = []
        }
        // optional
        dx.additionalParameters += '--multi-dex'
        dx.additionalParameters += "--main-dex-list=$projectDir/maindex.keep".toString() // enable the main-dex-list
        dx.additionalParameters += "--minimal-main-dex".toString() // enable the main-dex-list
    }
    // Depends On Task
    dexDebug.dependsOn generateMainDexList
    dexRelease.dependsOn generateMainDexList
}

task generateMainDexList(type: Exec) {
    workingDir '.'
    //on windows:
    commandLine 'cmd', '/c', 'gen-main-dex.bat'
    //on linux
//    commandLine './stop.sh'
    //store the output instead of printing to the console:
    standardOutput = new ByteArrayOutputStream()
    ext.output = {
        return standardOutput.toString()
    }
}